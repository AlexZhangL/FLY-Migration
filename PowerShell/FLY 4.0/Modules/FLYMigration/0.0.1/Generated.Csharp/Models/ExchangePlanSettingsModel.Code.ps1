// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AvePoint.PowerShell.FLYMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ExchangePlanSettingsModel
    {
        /// <summary>
        /// Initializes a new instance of the ExchangePlanSettingsModel class.
        /// </summary>
        public ExchangePlanSettingsModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExchangePlanSettingsModel class.
        /// </summary>
        /// <param name="databaseId">the id of migration database</param>
        public ExchangePlanSettingsModel(PlanNameLabel nameLabel, string policyId = default(string), string databaseId = default(string), ScheduleModel schedule = default(ScheduleModel), bool? synchronizeDeletion = default(bool?), bool? migrateMailboxPermissions = default(bool?), bool? migrateDistributionGroups = default(bool?), bool? migratePublicFolders = default(bool?), bool? migrateContacts = default(bool?), bool? migrateMailboxRules = default(bool?))
        {
            NameLabel = nameLabel;
            PolicyId = policyId;
            DatabaseId = databaseId;
            Schedule = schedule;
            SynchronizeDeletion = synchronizeDeletion;
            MigrateMailboxPermissions = migrateMailboxPermissions;
            MigrateDistributionGroups = migrateDistributionGroups;
            MigratePublicFolders = migratePublicFolders;
            MigrateContacts = migrateContacts;
            MigrateMailboxRules = migrateMailboxRules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nameLabel")]
        public PlanNameLabel NameLabel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "policyId")]
        public string PolicyId { get; set; }

        /// <summary>
        /// Gets or sets the id of migration database
        /// </summary>
        [JsonProperty(PropertyName = "databaseId")]
        public string DatabaseId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public ScheduleModel Schedule { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "synchronizeDeletion")]
        public bool? SynchronizeDeletion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "migrateMailboxPermissions")]
        public bool? MigrateMailboxPermissions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "migrateDistributionGroups")]
        public bool? MigrateDistributionGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "migratePublicFolders")]
        public bool? MigratePublicFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "migrateContacts")]
        public bool? MigrateContacts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "migrateMailboxRules")]
        public bool? MigrateMailboxRules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NameLabel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NameLabel");
            }
            if (NameLabel != null)
            {
                NameLabel.Validate();
            }
            if (Schedule != null)
            {
                Schedule.Validate();
            }
        }
    }
}
