// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AvePoint.PowerShell.FLYMigration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// &lt;div&gt;&lt;p&gt;AP Elements FLY API provides programmatic access to
    /// trigger and manage migration jobs through Web API endpoints. To call AP
    /// Elements FLY API, you must get the API key from AP Elements FLY
    /// interface &gt; Management &gt; General Settings &gt; &lt;a
    /// target='_blank' href='/#!/settings/general-settings/apikeys'
    /// rel='noopener noreferrer' class='link'&gt;API Keys&lt;/a&gt;. For every
    /// Web API call, the API key must be attached to the Authorization header
    /// in the HTTP request.&lt;/p&gt;&lt;/div&gt;&lt;div
    /// class="dxp-docFrame"&gt;Authorization: api_key
    /// Mgo8CM3TLB0Kgxdqp9RwKTjBt/p ...
    /// E/dBN0Q1/vjzjx0qftB/jc&lt;/div&gt;&lt;div&gt;&lt;p&gt;In this page, you
    /// can try and test the API endpoints by copying and pasting the API key
    /// to the api_key text box
    /// above.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Refer to &lt;a
    /// target='_blank'
    /// href='https://github.com/AvePoint/FLY-Migration/tree/master/WebAPI'
    /// rel='noopener noreferrer'&gt;Sample Codes&lt;/a&gt; for more sample
    /// codes.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;If you would like to
    /// write PowerShell scripts, please refer to &lt;a target='_blank'
    /// href='https://github.com/AvePoint/FLY-Migration/tree/master/PowerShell'
    /// rel='noopener noreferrer' class='link'&gt;PowerShell&lt;/a&gt; for more
    /// details.&lt;/p&gt;&lt;/div&gt;
    /// </summary>
    public partial class APElementsFLYAPI : ServiceClient<APElementsFLYAPI>, IAPElementsFLYAPI
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IExchangePolicies.
        /// </summary>
        public virtual IExchangePolicies ExchangePolicies { get; private set; }

        /// <summary>
        /// Gets the IExchangeJobs.
        /// </summary>
        public virtual IExchangeJobs ExchangeJobs { get; private set; }

        /// <summary>
        /// Gets the IExchangeJob.
        /// </summary>
        public virtual IExchangeJob ExchangeJob { get; private set; }

        /// <summary>
        /// Gets the IExchangeConnections.
        /// </summary>
        public virtual IExchangeConnections ExchangeConnections { get; private set; }

        /// <summary>
        /// Gets the IExchangePlans.
        /// </summary>
        public virtual IExchangePlans ExchangePlans { get; private set; }

        /// <summary>
        /// Gets the IExchangePlan.
        /// </summary>
        public virtual IExchangePlan ExchangePlan { get; private set; }

        /// <summary>
        /// Gets the IExchangeJobByPlan.
        /// </summary>
        public virtual IExchangeJobByPlan ExchangeJobByPlan { get; private set; }

        /// <summary>
        /// Gets the IExchangeJobsByPlan.
        /// </summary>
        public virtual IExchangeJobsByPlan ExchangeJobsByPlan { get; private set; }

        /// <summary>
        /// Gets the IFSJob.
        /// </summary>
        public virtual IFSJob FSJob { get; private set; }

        /// <summary>
        /// Gets the IFSJobs.
        /// </summary>
        public virtual IFSJobs FSJobs { get; private set; }

        /// <summary>
        /// Gets the IFSPlans.
        /// </summary>
        public virtual IFSPlans FSPlans { get; private set; }

        /// <summary>
        /// Gets the IFSPlan.
        /// </summary>
        public virtual IFSPlan FSPlan { get; private set; }

        /// <summary>
        /// Gets the IFSJobsByPlan.
        /// </summary>
        public virtual IFSJobsByPlan FSJobsByPlan { get; private set; }

        /// <summary>
        /// Gets the IFSJobByPlan.
        /// </summary>
        public virtual IFSJobByPlan FSJobByPlan { get; private set; }

        /// <summary>
        /// Gets the IFSConnections.
        /// </summary>
        public virtual IFSConnections FSConnections { get; private set; }

        /// <summary>
        /// Gets the IFSPolicies.
        /// </summary>
        public virtual IFSPolicies FSPolicies { get; private set; }

        /// <summary>
        /// Gets the ISPPolicies.
        /// </summary>
        public virtual ISPPolicies SPPolicies { get; private set; }

        /// <summary>
        /// Gets the ISPJob.
        /// </summary>
        public virtual ISPJob SPJob { get; private set; }

        /// <summary>
        /// Gets the ISPJobs.
        /// </summary>
        public virtual ISPJobs SPJobs { get; private set; }

        /// <summary>
        /// Gets the ISPPlans.
        /// </summary>
        public virtual ISPPlans SPPlans { get; private set; }

        /// <summary>
        /// Gets the ISPPlan.
        /// </summary>
        public virtual ISPPlan SPPlan { get; private set; }

        /// <summary>
        /// Gets the ISPJobsByPlan.
        /// </summary>
        public virtual ISPJobsByPlan SPJobsByPlan { get; private set; }

        /// <summary>
        /// Gets the ISPJobByPlan.
        /// </summary>
        public virtual ISPJobByPlan SPJobByPlan { get; private set; }

        /// <summary>
        /// Gets the IAppProfiles.
        /// </summary>
        public virtual IAppProfiles AppProfiles { get; private set; }

        /// <summary>
        /// Gets the IAccounts.
        /// </summary>
        public virtual IAccounts Accounts { get; private set; }

        /// <summary>
        /// Gets the IDatabases.
        /// </summary>
        public virtual IDatabases Databases { get; private set; }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling APElementsFLYAPI.Dispose(). False: will not dispose provided httpClient</param>
        protected APElementsFLYAPI(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected APElementsFLYAPI(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected APElementsFLYAPI(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected APElementsFLYAPI(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected APElementsFLYAPI(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public APElementsFLYAPI(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling APElementsFLYAPI.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public APElementsFLYAPI(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public APElementsFLYAPI(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public APElementsFLYAPI(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the APElementsFLYAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public APElementsFLYAPI(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            ExchangePolicies = new ExchangePolicies(this);
            ExchangeJobs = new ExchangeJobs(this);
            ExchangeJob = new ExchangeJob(this);
            ExchangeConnections = new ExchangeConnections(this);
            ExchangePlans = new ExchangePlans(this);
            ExchangePlan = new ExchangePlan(this);
            ExchangeJobByPlan = new ExchangeJobByPlan(this);
            ExchangeJobsByPlan = new ExchangeJobsByPlan(this);
            FSJob = new FSJob(this);
            FSJobs = new FSJobs(this);
            FSPlans = new FSPlans(this);
            FSPlan = new FSPlan(this);
            FSJobsByPlan = new FSJobsByPlan(this);
            FSJobByPlan = new FSJobByPlan(this);
            FSConnections = new FSConnections(this);
            FSPolicies = new FSPolicies(this);
            SPPolicies = new SPPolicies(this);
            SPJob = new SPJob(this);
            SPJobs = new SPJobs(this);
            SPPlans = new SPPlans(this);
            SPPlan = new SPPlan(this);
            SPJobsByPlan = new SPJobsByPlan(this);
            SPJobByPlan = new SPJobByPlan(this);
            AppProfiles = new AppProfiles(this);
            Accounts = new Accounts(this);
            Databases = new Databases(this);
            BaseUri = new System.Uri("https://localhost:6010");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
